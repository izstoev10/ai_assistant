// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: openai-proxy.proto

package openaipb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OpenAIProxy_Transcribe_FullMethodName = "/openaiproxy.OpenAIProxy/Transcribe"
	OpenAIProxy_Chat_FullMethodName       = "/openaiproxy.OpenAIProxy/Chat"
)

// OpenAIProxyClient is the client API for OpenAIProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenAIProxyClient interface {
	// Client-streaming RPC: send audio chunks, receive final transcript
	Transcribe(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[AudioChunk, Transcript], error)
	// Bidirectional streaming RPC: send user messages, receive AI responses
	Chat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatMessage, ChatResponse], error)
}

type openAIProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenAIProxyClient(cc grpc.ClientConnInterface) OpenAIProxyClient {
	return &openAIProxyClient{cc}
}

func (c *openAIProxyClient) Transcribe(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[AudioChunk, Transcript], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OpenAIProxy_ServiceDesc.Streams[0], OpenAIProxy_Transcribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AudioChunk, Transcript]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OpenAIProxy_TranscribeClient = grpc.ClientStreamingClient[AudioChunk, Transcript]

func (c *openAIProxyClient) Chat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatMessage, ChatResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OpenAIProxy_ServiceDesc.Streams[1], OpenAIProxy_Chat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OpenAIProxy_ChatClient = grpc.BidiStreamingClient[ChatMessage, ChatResponse]

// OpenAIProxyServer is the server API for OpenAIProxy service.
// All implementations must embed UnimplementedOpenAIProxyServer
// for forward compatibility.
type OpenAIProxyServer interface {
	// Client-streaming RPC: send audio chunks, receive final transcript
	Transcribe(grpc.ClientStreamingServer[AudioChunk, Transcript]) error
	// Bidirectional streaming RPC: send user messages, receive AI responses
	Chat(grpc.BidiStreamingServer[ChatMessage, ChatResponse]) error
	mustEmbedUnimplementedOpenAIProxyServer()
}

// UnimplementedOpenAIProxyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOpenAIProxyServer struct{}

func (UnimplementedOpenAIProxyServer) Transcribe(grpc.ClientStreamingServer[AudioChunk, Transcript]) error {
	return status.Errorf(codes.Unimplemented, "method Transcribe not implemented")
}
func (UnimplementedOpenAIProxyServer) Chat(grpc.BidiStreamingServer[ChatMessage, ChatResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedOpenAIProxyServer) mustEmbedUnimplementedOpenAIProxyServer() {}
func (UnimplementedOpenAIProxyServer) testEmbeddedByValue()                     {}

// UnsafeOpenAIProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenAIProxyServer will
// result in compilation errors.
type UnsafeOpenAIProxyServer interface {
	mustEmbedUnimplementedOpenAIProxyServer()
}

func RegisterOpenAIProxyServer(s grpc.ServiceRegistrar, srv OpenAIProxyServer) {
	// If the following call pancis, it indicates UnimplementedOpenAIProxyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OpenAIProxy_ServiceDesc, srv)
}

func _OpenAIProxy_Transcribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OpenAIProxyServer).Transcribe(&grpc.GenericServerStream[AudioChunk, Transcript]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OpenAIProxy_TranscribeServer = grpc.ClientStreamingServer[AudioChunk, Transcript]

func _OpenAIProxy_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OpenAIProxyServer).Chat(&grpc.GenericServerStream[ChatMessage, ChatResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OpenAIProxy_ChatServer = grpc.BidiStreamingServer[ChatMessage, ChatResponse]

// OpenAIProxy_ServiceDesc is the grpc.ServiceDesc for OpenAIProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenAIProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openaiproxy.OpenAIProxy",
	HandlerType: (*OpenAIProxyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transcribe",
			Handler:       _OpenAIProxy_Transcribe_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _OpenAIProxy_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "openai-proxy.proto",
}
